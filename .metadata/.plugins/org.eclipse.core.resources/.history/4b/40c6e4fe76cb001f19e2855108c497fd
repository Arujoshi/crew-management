package com.flight.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.flight.exception.CrewConflictException;
import com.flight.exception.MaxWorkingHourExceedException;
import com.flight.feign.AuthorisationClient;
import com.flight.model.CrewAssignment;
import com.flight.model.Flight;
import com.flight.request.FlightAssignmentRequest;
import com.flight.service.FlightAssignmentService;
import com.flight.service.FlightServiceImpl;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/flight")
public class FlightController {

	@Autowired
	private FlightServiceImpl flightService;
	
	@Autowired
	private FlightAssignmentService flightAssignment;
	
	@Autowired
	private AuthorisationClient authorisationClient;
	
	@GetMapping
	public List<Flight> getAllFligts(){
		return flightService.getAllFlights();
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Flight> getFlightById(@PathVariable("id") Long id){
		Flight flight=flightService.getFlightById(id);
		if(flight!=null) {
			return ResponseEntity.ok(flight);
		}
		else {
			return ResponseEntity.notFound().build();
		}
	}
	
	@PostMapping
	public Flight addNewFlight(@Valid @RequestBody Flight flight){
		return flightService.addFlight(flight);
	}
	
	@DeleteMapping("/{id}")
	public Flight deleteFlight(@PathVariable("id") Long id) {
		return flightService.deleteFlight(id);
	}
	
	@PutMapping("/{id}")
	public Flight updateFlight(@PathVariable("id") Long id,@Valid @RequestBody Flight flight) {
		return flightService.updateFlight(id, flight);
	}
	
	@PostMapping("/assign")
	public ResponseEntity<?> assignCrew(@Valid @RequestBody FlightAssignmentRequest assigRequest) {
		System.out.println(assigRequest);
		try {
			CrewAssignment assignment=flightAssignment.assignCrewToFlight(assigRequest.getCrewId(),assigRequest.getFlightId(), assigRequest.getClassType());
            return ResponseEntity.ok(assignment);
        } catch (CrewConflictException | MaxWorkingHourExceedException | IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
	}
}
