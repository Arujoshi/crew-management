package com.auth.controller;

import java.io.IOException;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;

import com.auth.model.AuthRequest;
import com.auth.model.UserInfo;
import com.auth.service.JwtService;
import com.auth.service.UserInfoService;

import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/auth")
public class UserController {

    @Autowired
    private UserInfoService service;

    @Autowired
    private JwtService jwtService;

    @Autowired
    private AuthenticationManager authenticationManager;


    @PostMapping("/addNewUser")
    public String addNewUser(@Valid @RequestBody UserInfo userInfo) {
        return service.addUser(userInfo);
    }

    @GetMapping("/user/userProfile")
    @PreAuthorize("hasAuthority('ROLE_USER')")
    public String userProfile() {
        return "Welcome to User Profile";
    }

    @GetMapping("/admin/adminProfile")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    public String adminProfile() {
        return "Welcome to Admin Profile";
    }
    
    @GetMapping("/accessDenied")
    public String unauthorized() {
    	return "Access denied";
    }

//    @PostMapping("/generateToken")
//    public String authenticateAndGetToken(@Valid @RequestBody AuthRequest authRequest) {
//        Authentication authentication = authenticationManager.authenticate(
//            new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword())
//        );
//        if (authentication.isAuthenticated()) {
//            return jwtService.generateToken(authRequest.getUserName());
//        } else {
//            throw new UsernameNotFoundException("Invalid user request!");
//        }
//    }
    
//    @PostMapping("/generateToken")
//    public ResponseEntity<Object> authenticateAndRedirect(@Valid @RequestBody AuthRequest authRequest, HttpServletResponse response) {
//        Authentication authentication = authenticationManager.authenticate(
//            new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword())
//        );
//
//        if (authentication.isAuthenticated()) {
//            String jwtToken = jwtService.generateToken(authRequest.getUserName());
//
//            // Check the user's roles and determine redirection
//            String redirectUrl;
//            if (authentication.getAuthorities().stream()
//                    .anyMatch(authority -> authority.getAuthority().equals("ROLE_ADMIN"))) {
//                redirectUrl = "/admin/adminProfile"; // Replace with your admin page URL
//            } else if (authentication.getAuthorities().stream()
//                    .anyMatch(authority -> authority.getAuthority().equals("ROLE_USER"))) {
//                redirectUrl = "/user/userProfile"; // Replace with your user page URL
//            } else {
//                redirectUrl = "/accessDenied"; // Fallback for no matching roles
//            }
//
//            // Set JWT token in the response header
//            response.setHeader("Authorization", "Bearer " + jwtToken);
//
//            // Return redirection URL as a response
//            return ResponseEntity.ok(Map.of(
//                "message", "Authentication successful!",
//                "redirectUrl", redirectUrl
//            ));
//        } else {
//            throw new UsernameNotFoundException("Invalid user request!");
//        }
//    }
    
    @PostMapping("/generateToken")
    public void authenticateAndRedirect(@Valid @RequestBody AuthRequest authRequest, HttpServletResponse response) throws IOException {
        // Authenticate user
        Authentication authentication = authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword())
        );

        if (authentication.isAuthenticated()) {
            // Generate JWT token
            String jwtToken = jwtService.generateToken(authRequest.getUserName());

            // Set the JWT token in the response header
            response.setHeader("Authorization", "Bearer " + jwtToken);

            // Redirect based on user roles
            if (authentication.getAuthorities().stream()
                    .anyMatch(authority -> authority.getAuthority().equals("ROLE_ADMIN"))) {
                // Redirect to admin page
                response.sendRedirect("/admin/adminProfile"); // Change to your actual admin page URL
            } else if (authentication.getAuthorities().stream()
                    .anyMatch(authority -> authority.getAuthority().equals("ROLE_USER"))) {
                // Redirect to user page
                response.sendRedirect("/user/userProfile"); // Change to your actual user page URL
            } else {
                // If no role matched, redirect to an access denied page or fallback page
                response.sendRedirect("/accessDenied");
            }
        } else {
            // Authentication failed, throw exception or handle error
            throw new UsernameNotFoundException("Invalid user request!");
        }
    }

}